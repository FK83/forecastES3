# Fix t-dist degrees of freedom? (set to NULL to estimate df)
df_fix <- NULL
# Get data
omi_data <- read.table("omi_data.csv",
sep = ",", header = TRUE)
dat <- omi_data %>%
select(one_of(c("date", paste0(c("ret_", "rk_"), index)))) %>%
na.omit
dat$date
rm(list = ls())
library(dplyr)
library(lubridate)
library(stringr)
library(murphydiagram)
library(reshape2)
library(forecastES2)
# Set working directory
setwd("/home/fabian/Dokumente/var_es_murphy/replication_files/")
# Index (either "dax" or "sp500")
index <- "dax"
# Length of rolling window (set to NULL for expanding window)
roll <- 1500
# Quantile level for VaR
alpha <- 0.025
# Refit period
refit_frequency <- "months"
# Year to start loop
first_year <- 2006
# Fix t-dist degrees of freedom? (set to NULL to estimate df)
df_fix <- NULL
# Get data
omi_data <- read.table("omi_data.csv",
sep = ",", header = TRUE,
stringsAsFactors = FALSE)
dat <- omi_data %>%
select(one_of(c("date", paste0(c("ret_", "rk_"), index)))) %>%
na.omit
dat$date
rm(list = ls())
library(dplyr)
library(lubridate)
library(stringr)
library(murphydiagram)
library(reshape2)
library(forecastES2)
# Set working directory
setwd("/home/fabian/Dokumente/var_es_murphy/replication_files/")
# Index (either "dax" or "sp500")
index <- "dax"
# Length of rolling window (set to NULL for expanding window)
roll <- 1500
# Quantile level for VaR
alpha <- 0.025
# Refit period
refit_frequency <- "months"
# Year to start loop
first_year <- 2006
# Fix t-dist degrees of freedom? (set to NULL to estimate df)
df_fix <- NULL
# Get data
omi_data <- read.table("omi_data.csv",
sep = ",", header = TRUE,
stringsAsFactors = FALSE)
dat <- omi_data %>%
select(one_of(c("date", paste0(c("ret_", "rk_"), index)))) %>%
na.omit
# First index for estimation
first_ind <- dat$date %>%
(function(z) min(which(str_sub(z, 1, 4) == first_year)))
# Dates at which model if re-fitted
refit_dates <- dat %>% filter(row_number() >= first_ind) %>%
mutate(g = floor_date(date, refit_frequency)) %>%
group_by(g) %>%
summarise(refit_dates = min(date)) %>% ungroup %>% select(refit_dates)
# Matrix for results
fc_mat <- matrix(0, nrow(dat) - first_ind - 1, 8)
# Data frame for parameter estimates
est_df <- fc_df <- data.frame()
# Stuff for parameter estimation
if (is.null(df_fix)){
# Case 1: Estimate degrees of freedom for t-dist
pars <- c("w", "a", "b", "df", "cnvrgnc")
par_start_heavy <- par_start_garch <- c(log(0.05), 0.4, 0.6, 6)
} else {
# Case 2: Fix degrees of freedom for t-dist
pars <- c("w", "a", "b", "cnvrgnc")
par_start_heavy <- par_start_garch <- c(log(0.05), 0.4, 0.6)
}
# Helper stuff
par_tf <- function(z) c(exp(z[1]), z[-1])
optim_tmp_both <- matrix(0, length(pars)-1, 2)
#############################################
# Loop over days
#############################################
for (jj in first_ind:(nrow(dat)-1)){
# Current date
current_date <- dat$date[jj]
# Pick data until jj
dat_tmp <- dat %>%
filter(row_number() <= jj)
# Rolling window
if (!is.null(roll)){
dat_tmp <- tail(dat_tmp, roll)
}
# Vector of returns
ret <- dat_tmp[, paste0("ret_", index)]
# Loop over heavy/garch specifications
for (mm in c("heavy", "garch")){
if (mm == "heavy"){
rm <- dat_tmp[, paste0("rk_", index)]
ct <- 1
} else {
rm <- ret^2
ct <- 2
}
# Re-fit model
if (current_date %in% refit_dates$refit_dates){
# Pick starting values
if (mm == "heavy"){
par_start <- par_start_heavy
} else {
par_start <- par_start_garch
}
# Run optimizer
optim_tmp <- optim(par_start, forecastES2:::ff, rm = rm, ret = ret,
df_fix = df_fix)
# Store values in helper matrix (for easier reference)
optim_tmp_both[, ct] <- optim_tmp$par
# Store values in data frame
est_tmp <- data.frame(date = current_date, spec = mm, par = pars,
value = c(par_tf(optim_tmp$par),
optim_tmp$convergence),
stringsAsFactors = FALSE)
est_df <- rbind(est_df, est_tmp)
}
# Compute forecast
fc_aux <- forecastES2:::heavy_fc(theta = optim_tmp_both[, ct], rm = rm,
ret = ret, df_fix = df_fix,
alpha = alpha)
fc_tmp <- data.frame(date = dat$date[jj+1],
spec = mm, fct= c("vola", "var", "es"),
value = fc_aux,
stringsAsFactors = FALSE)
fc_df <- rbind(fc_df, fc_tmp)
}
# Add simple forecasts ('historical simulation')
fc_tmp <- data.frame(date = dat$date[jj+1],
spec = "hs", fct = c("vola", "var", "es"),
value = c(sd(ret), quantile(ret, alpha),
forecastES2:::es_emp(ret, alpha)),
stringsAsFactors = FALSE)
fc_df <- rbind(fc_df, fc_tmp)
}
# Transform data frames to wide format
est_df_final <- est_df %>% dcast(date ~ par + spec)
fc_df_final <- fc_df %>% dcast(date ~ fct + spec) %>%
left_join(dat[,c("date", paste0("ret_", index))], by = "date")
names(fc_df_final) <- gsub(paste0("ret_", index), "rlz", names(fc_df_final))
auxn <- function(z) paste0(c("vola_", "var_", "es_"), z)
fc_eval <- fc_df_final[, c("date", auxn("hs"), auxn("garch"),
auxn("heavy"), "rlz")]
# Save estimates
svnm1 <- paste0(index, "_parameters.csv")
write.table(est_df_final, svnm1)
# Save forecasts
svnm2 <- paste0(index, "_", str_replace(alpha, "\\.", "_"), ".csv")
write.table(fc_df_final, svnm2)
rm(list = ls())
library(dplyr)
library(lubridate)
library(stringr)
library(murphydiagram)
library(reshape2)
library(forecastES2)
# Set working directory
setwd("/home/fabian/Dokumente/var_es_murphy/replication_files/")
# Index (either "dax" or "sp500")
index <- "dax"
# Length of rolling window (set to NULL for expanding window)
roll <- 1500
# Quantile level for VaR
alpha <- 0.025
# Refit period
refit_frequency <- "months"
# Year to start loop
first_year <- 2006
# Fix t-dist degrees of freedom? (set to NULL to estimate df)
df_fix <- NULL
# Get data
omi_data <- read.table("omi_data.csv",
sep = ",", header = TRUE,
stringsAsFactors = FALSE)
dat <- omi_data %>%
select(one_of(c("date", paste0(c("ret_", "rk_"), index)))) %>%
na.omit
# First index for estimation
first_ind <- dat$date %>%
(function(z) min(which(str_sub(z, 1, 4) == first_year)))
refit_dates <- dat %>% filter(row_number() >= first_ind) %>%
mutate(g = floor_date(date, refit_frequency)) %>%
group_by(g) %>%
summarise(refit_dates = min(date)) %>% ungroup %>% select(refit_dates)
head(dat)
first_ind
# Dates at which model if re-fitted
refit_dates <- dat %>% filter(row_number() >= first_ind) %>%
mutate(g = floor_date(date, refit_frequency))
rm(list = ls())
library(dplyr)
library(lubridate)
library(stringr)
library(murphydiagram)
library(reshape2)
library(forecastES2)
# Set working directory
setwd("/home/fabian/Dokumente/var_es_murphy/replication_files/")
# Index (either "dax" or "sp500")
index <- "dax"
# Length of rolling window (set to NULL for expanding window)
roll <- 1500
# Quantile level for VaR
alpha <- 0.025
# Refit period
refit_frequency <- "months"
# Year to start loop
first_year <- 2006
# Fix t-dist degrees of freedom? (set to NULL to estimate df)
df_fix <- NULL
# Get data
omi_data <- read.table("omi_data.csv",
sep = ",", header = TRUE,
stringsAsFactors = FALSE)
dat <- omi_data %>%
select(one_of(c("date", paste0(c("ret_", "rk_"), index)))) %>%
na.omit %>% mutate(date = as.Date(date))
# First index for estimation
first_ind <- dat$date %>%
(function(z) min(which(str_sub(z, 1, 4) == first_year)))
# Dates at which model if re-fitted
refit_dates <- dat %>% filter(row_number() >= first_ind) %>%
mutate(g = floor_date(date, refit_frequency)) %>%
group_by(g) %>%
summarise(refit_dates = min(date)) %>% ungroup %>% select(refit_dates)
refit_dates
rm(list = ls())
library(dplyr)
library(lubridate)
library(stringr)
library(murphydiagram)
library(reshape2)
library(forecastES2)
# Set working directory
setwd("/home/fabian/Dokumente/var_es_murphy/replication_files/")
# Index (either "dax" or "sp500")
index <- "dax"
# Length of rolling window (set to NULL for expanding window)
roll <- 1500
# Quantile level for VaR
alpha <- 0.025
# Refit period
refit_frequency <- "months"
# Year to start loop
first_year <- 2006
# Fix t-dist degrees of freedom? (set to NULL to estimate df)
df_fix <- NULL
# Get data
omi_data <- read.table("omi_data.csv",
sep = ",", header = TRUE,
stringsAsFactors = FALSE)
dat <- omi_data %>%
select(one_of(c("date", paste0(c("ret_", "rk_"), index)))) %>%
na.omit %>% mutate(date = as.Date(date))
# First index for estimation
first_ind <- dat$date %>%
(function(z) min(which(str_sub(z, 1, 4) == first_year)))
# Dates at which model if re-fitted
refit_dates <- dat %>% filter(row_number() >= first_ind) %>%
mutate(g = floor_date(date, refit_frequency)) %>%
group_by(g) %>%
summarise(refit_dates = min(date)) %>% ungroup %>% select(refit_dates)
# Matrix for results
fc_mat <- matrix(0, nrow(dat) - first_ind - 1, 8)
# Data frame for parameter estimates
est_df <- fc_df <- data.frame()
# Stuff for parameter estimation
if (is.null(df_fix)){
# Case 1: Estimate degrees of freedom for t-dist
pars <- c("w", "a", "b", "df", "cnvrgnc")
par_start_heavy <- par_start_garch <- c(log(0.05), 0.4, 0.6, 6)
} else {
# Case 2: Fix degrees of freedom for t-dist
pars <- c("w", "a", "b", "cnvrgnc")
par_start_heavy <- par_start_garch <- c(log(0.05), 0.4, 0.6)
}
# Helper stuff
par_tf <- function(z) c(exp(z[1]), z[-1])
optim_tmp_both <- matrix(0, length(pars)-1, 2)
#############################################
# Loop over days
#############################################
for (jj in first_ind:(nrow(dat)-1)){
# Current date
current_date <- dat$date[jj]
# Pick data until jj
dat_tmp <- dat %>%
filter(row_number() <= jj)
# Rolling window
if (!is.null(roll)){
dat_tmp <- tail(dat_tmp, roll)
}
# Vector of returns
ret <- dat_tmp[, paste0("ret_", index)]
# Loop over heavy/garch specifications
for (mm in c("heavy", "garch")){
if (mm == "heavy"){
rm <- dat_tmp[, paste0("rk_", index)]
ct <- 1
} else {
rm <- ret^2
ct <- 2
}
# Re-fit model
if (current_date %in% refit_dates$refit_dates){
# Pick starting values
if (mm == "heavy"){
par_start <- par_start_heavy
} else {
par_start <- par_start_garch
}
# Run optimizer
optim_tmp <- optim(par_start, forecastES2:::ff, rm = rm, ret = ret,
df_fix = df_fix)
# Store values in helper matrix (for easier reference)
optim_tmp_both[, ct] <- optim_tmp$par
# Store values in data frame
est_tmp <- data.frame(date = current_date, spec = mm, par = pars,
value = c(par_tf(optim_tmp$par),
optim_tmp$convergence),
stringsAsFactors = FALSE)
est_df <- rbind(est_df, est_tmp)
}
# Compute forecast
fc_aux <- forecastES2:::heavy_fc(theta = optim_tmp_both[, ct], rm = rm,
ret = ret, df_fix = df_fix,
alpha = alpha)
fc_tmp <- data.frame(date = dat$date[jj+1],
spec = mm, fct= c("vola", "var", "es"),
value = fc_aux,
stringsAsFactors = FALSE)
fc_df <- rbind(fc_df, fc_tmp)
}
# Add simple forecasts ('historical simulation')
fc_tmp <- data.frame(date = dat$date[jj+1],
spec = "hs", fct = c("vola", "var", "es"),
value = c(sd(ret), quantile(ret, alpha),
forecastES2:::es_emp(ret, alpha)),
stringsAsFactors = FALSE)
fc_df <- rbind(fc_df, fc_tmp)
}
# Transform data frames to wide format
est_df_final <- est_df %>% dcast(date ~ par + spec)
fc_df_final <- fc_df %>% dcast(date ~ fct + spec) %>%
left_join(dat[,c("date", paste0("ret_", index))], by = "date")
names(fc_df_final) <- gsub(paste0("ret_", index), "rlz", names(fc_df_final))
auxn <- function(z) paste0(c("vola_", "var_", "es_"), z)
fc_eval <- fc_df_final[, c("date", auxn("hs"), auxn("garch"),
auxn("heavy"), "rlz")]
# Save estimates
svnm1 <- paste0(index, "_parameters.csv")
write.table(est_df_final, svnm1)
# Save forecasts
svnm2 <- paste0(index, "_", str_replace(alpha, "\\.", "_"), ".csv")
write.table(fc_df_final, svnm2)
rm(list = ls())
library(dplyr)
library(lubridate)
library(stringr)
library(murphydiagram)
library(reshape2)
library(forecastES2)
# Set working directory
setwd("/home/fabian/Dokumente/var_es_murphy/replication_files/")
# Index (either "dax" or "sp500")
index <- "sp500"
# Length of rolling window (set to NULL for expanding window)
roll <- 1500
# Quantile level for VaR
alpha <- 0.025
# Refit period
refit_frequency <- "months"
# Year to start loop
first_year <- 2006
# Fix t-dist degrees of freedom? (set to NULL to estimate df)
df_fix <- NULL
# Get data
omi_data <- read.table("omi_data.csv",
sep = ",", header = TRUE,
stringsAsFactors = FALSE)
dat <- omi_data %>%
select(one_of(c("date", paste0(c("ret_", "rk_"), index)))) %>%
na.omit %>% mutate(date = as.Date(date))
# First index for estimation
first_ind <- dat$date %>%
(function(z) min(which(str_sub(z, 1, 4) == first_year)))
# Dates at which model if re-fitted
refit_dates <- dat %>% filter(row_number() >= first_ind) %>%
mutate(g = floor_date(date, refit_frequency)) %>%
group_by(g) %>%
summarise(refit_dates = min(date)) %>% ungroup %>% select(refit_dates)
# Matrix for results
fc_mat <- matrix(0, nrow(dat) - first_ind - 1, 8)
# Data frame for parameter estimates
est_df <- fc_df <- data.frame()
# Stuff for parameter estimation
if (is.null(df_fix)){
# Case 1: Estimate degrees of freedom for t-dist
pars <- c("w", "a", "b", "df", "cnvrgnc")
par_start_heavy <- par_start_garch <- c(log(0.05), 0.4, 0.6, 6)
} else {
# Case 2: Fix degrees of freedom for t-dist
pars <- c("w", "a", "b", "cnvrgnc")
par_start_heavy <- par_start_garch <- c(log(0.05), 0.4, 0.6)
}
# Helper stuff
par_tf <- function(z) c(exp(z[1]), z[-1])
optim_tmp_both <- matrix(0, length(pars)-1, 2)
#############################################
# Loop over days
#############################################
for (jj in first_ind:(nrow(dat)-1)){
# Current date
current_date <- dat$date[jj]
# Pick data until jj
dat_tmp <- dat %>%
filter(row_number() <= jj)
# Rolling window
if (!is.null(roll)){
dat_tmp <- tail(dat_tmp, roll)
}
# Vector of returns
ret <- dat_tmp[, paste0("ret_", index)]
# Loop over heavy/garch specifications
for (mm in c("heavy", "garch")){
if (mm == "heavy"){
rm <- dat_tmp[, paste0("rk_", index)]
ct <- 1
} else {
rm <- ret^2
ct <- 2
}
# Re-fit model
if (current_date %in% refit_dates$refit_dates){
# Pick starting values
if (mm == "heavy"){
par_start <- par_start_heavy
} else {
par_start <- par_start_garch
}
# Run optimizer
optim_tmp <- optim(par_start, forecastES2:::ff, rm = rm, ret = ret,
df_fix = df_fix)
# Store values in helper matrix (for easier reference)
optim_tmp_both[, ct] <- optim_tmp$par
# Store values in data frame
est_tmp <- data.frame(date = current_date, spec = mm, par = pars,
value = c(par_tf(optim_tmp$par),
optim_tmp$convergence),
stringsAsFactors = FALSE)
est_df <- rbind(est_df, est_tmp)
}
# Compute forecast
fc_aux <- forecastES2:::heavy_fc(theta = optim_tmp_both[, ct], rm = rm,
ret = ret, df_fix = df_fix,
alpha = alpha)
fc_tmp <- data.frame(date = dat$date[jj+1],
spec = mm, fct= c("vola", "var", "es"),
value = fc_aux,
stringsAsFactors = FALSE)
fc_df <- rbind(fc_df, fc_tmp)
}
# Add simple forecasts ('historical simulation')
fc_tmp <- data.frame(date = dat$date[jj+1],
spec = "hs", fct = c("vola", "var", "es"),
value = c(sd(ret), quantile(ret, alpha),
forecastES2:::es_emp(ret, alpha)),
stringsAsFactors = FALSE)
fc_df <- rbind(fc_df, fc_tmp)
}
# Transform data frames to wide format
est_df_final <- est_df %>% dcast(date ~ par + spec)
fc_df_final <- fc_df %>% dcast(date ~ fct + spec) %>%
left_join(dat[,c("date", paste0("ret_", index))], by = "date")
names(fc_df_final) <- gsub(paste0("ret_", index), "rlz", names(fc_df_final))
auxn <- function(z) paste0(c("vola_", "var_", "es_"), z)
fc_eval <- fc_df_final[, c("date", auxn("hs"), auxn("garch"),
auxn("heavy"), "rlz")]
# Save estimates
svnm1 <- paste0(index, "_parameters.csv")
write.table(est_df_final, svnm1)
# Save forecasts
svnm2 <- paste0(index, "_", str_replace(alpha, "\\.", "_"), ".csv")
write.table(fc_df_final, svnm2)
warnings()
getwd()
setwd("../../forecastES3")
library(devtools)
check()
load_all()
load_all()
load_all()
?ptest_VaRES
?forecasts
